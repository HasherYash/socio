# soCiO - Social Network API

soCiO is a full-featured social networking application built with Spring Boot, designed for modern user interaction, group management, content moderation, and analytics. This RESTful API supports role-based access with JWT authentication, scalable user-post-group relationships, and admin-level controls.

---

## üß† Features

### üë§ User Functionality
- Register/Login with JWT
- Follow/Unfollow users
- Like, Comment, Share, Report posts
- Password reset and change tracking
- Private/Public profiles

### üìù Post Management
- Create, Update, Delete posts
- Attach file types (image, video, document)
- Post sharing & reporting
- View post analytics

### üë• Groups
- Create and manage groups
- Add/Remove users from groups
- Group-specific posts
- Search groups by parameters

### üõ°Ô∏è Admin Features
- View all users sorted by follower count grouped by registration date
- Group analytics (sort by member or post count)
- View and moderate reported posts (grouped by file type/date/user)
- Bulk user upload via CSV/XLSX

---

## üèóÔ∏è Tech Stack

- Java 17
- Spring Boot 3
- Spring Security + JWT
- JPA/Hibernate
- MySQL
- Apache POI for Excel file handling
- Lombok

---

## üìÅ Project Structure

com.socio.socio
‚îú‚îÄ‚îÄ config/              # JWT & Security configuration
‚îú‚îÄ‚îÄ controller/          # All REST controllers
‚îú‚îÄ‚îÄ dto/                 # Request/Response DTOs
‚îú‚îÄ‚îÄ entity/              # Entity classes (User, Post, Group, etc.)
‚îú‚îÄ‚îÄ repository/          # Spring Data JPA Repositories
‚îú‚îÄ‚îÄ service/             # Business logic
‚îú‚îÄ‚îÄ util/                # Utilities (e.g., file handling)
‚îî‚îÄ‚îÄ SoCiOApplication.java

---

## üîê Authentication

- Authentication is done via JWT.
- Access token is issued upon login and required in the `Authorization` header (`Bearer <token>`).

---

## üìÑ API Endpoints (Highlights)

##Auth
	‚Ä¢	POST /api/auth/register : Register a new user
	‚Ä¢	POST /api/auth/login : Login and receive JWT token


##Users
	‚Ä¢	GET /api/users/{username} : Get user profile by username
	‚Ä¢	PUT /api/users/update-password : Update current user‚Äôs password
	‚Ä¢	POST /api/follow/{username} : Follow or unfollow a user
	‚Ä¢	GET /api/follow/followers/{username} : Get list of followers for a user
	‚Ä¢	GET /api/follow/following/{username} : Get list of users followed by a user

##Posts
	‚Ä¢	POST /api/posts : Create a new post
	‚Ä¢	GET /api/posts/{postId} : Get a post by ID
	‚Ä¢	PUT /api/posts/{postId} : Update a post
	‚Ä¢	DELETE /api/posts/{postId} : Delete a post
	‚Ä¢	POST /api/posts/share/{postId} : Share an existing post
	‚Ä¢	POST /api/posts/report/{postId} : Report a post
	‚Ä¢	GET /api/posts/user/{username} : Get all posts by a user

##Comments
	‚Ä¢	POST /api/comments/{postId} : Add comment to a post
	‚Ä¢	GET /api/comments/{postId} : Get all comments for a post

##Likes
	‚Ä¢	POST /api/likes/{postId} : Like a post
	‚Ä¢	DELETE /api/likes/{postId} : Unlike a post
	‚Ä¢	GET /api/likes/{postId} : Get users who liked a post

##Groups
	‚Ä¢	POST /api/groups : Create a group
	‚Ä¢	PUT /api/groups/{groupId}/add-user : Add user to group
	‚Ä¢	PUT /api/groups/{groupId}/remove-user : Remove user from group
	‚Ä¢	GET /api/groups/{groupId}/posts : Get all posts in a group
	‚Ä¢	POST /api/groups/{groupId}/posts : Create post in a group
	‚Ä¢	GET /api/groups/user/{username} : Get all groups a user is part of
	‚Ä¢	GET /api/groups/search?name=&minUsers=&maxUsers= : Search groups by filters
	‚Ä¢	GET /api/groups/sorted?sortBy=userCount|postCount : Get sorted groups    

##Admin
	‚Ä¢	GET /api/admin/user-stats : Get user analytics by registration date
	‚Ä¢	GET /api/admin/analytics/posts : Get post analytics
	‚Ä¢	GET /api/admin/reports/grouped : Get reported posts grouped by date/user/filetype
	‚Ä¢	POST /api/admin/reports/action/{postId} : Take action on reported post (block/delete)
	‚Ä¢	POST /api/admin/users/upload : Bulk upload users via CSV/XLSX    

---

## üì¶ Sample CSV Format for Bulk Upload

```csv
id,email,password
1,user1@example.com,password123
2,user2@example.com,password456

Supported formats: .csv, .xlsx

Running Tests
./mvnw test


Getting Started

Prerequisites
	‚Ä¢	Java 17+
	‚Ä¢	Maven
	‚Ä¢	MySQL running on localhost:3306

Steps

git clone https://github.com/HasheYash/socio.git
cd socio-backend
cp .env.example .env
# Fill DB credentials and JWT secret
./mvnw spring-boot:run

App runs on: http://localhost:8080

 Admin Role

To create an admin:

POST /api/admin/user
{
  "email": "admin@example.com",
  "password": "admin123",
  "role": "ADMIN",
  "username": "admin"
}

DataBase Schema Diagram

TABLE: users
------------------------------------------------
id                   BIGINT          PRIMARY KEY
email                VARCHAR(255)    UNIQUE, NOT NULL
password             VARCHAR(255)    NOT NULL
username             VARCHAR(255)    UNIQUE, NOT NULL
role                 VARCHAR(255)    NOT NULL  -- USER / ADMIN
date_of_birth        DATE
is_private_profile   BIT(1)          DEFAULT 0
password_changed_at  DATETIME(6)
created_at           DATETIME

TABLE: post
------------------------------------------------
id                   BIGINT          PRIMARY KEY
content              VARCHAR(255)    NOT NULL
created_at           DATETIME(6)
file_type            VARCHAR(255)
moderation_status    VARCHAR(255)    DEFAULT 'PENDING'
reported             BIT(1)          DEFAULT 0
reported_by_id       BIGINT          FK ‚Üí users(id)
user_id              BIGINT          FK ‚Üí users(id)
group_id             BIGINT          FK ‚Üí groups(id)

TABLE: comments
------------------------------------------------
id                   BIGINT          PRIMARY KEY
content              VARCHAR(1000)   NOT NULL
created_at           DATETIME(6)
updated_at           DATETIME(6)
post_id              BIGINT          FK ‚Üí post(id)
user_id              BIGINT          FK ‚Üí users(id)

TABLE: likes
------------------------------------------------
id                   BIGINT          PRIMARY KEY
liked_at             DATETIME(6)
post_id              BIGINT          FK ‚Üí post(id)
user_id              BIGINT          FK ‚Üí users(id)

TABLE: groups
------------------------------------------------
id                   BIGINT          PRIMARY KEY
name                 VARCHAR(255)    NOT NULL, UNIQUE
description          VARCHAR(255)
created_by           BIGINT          FK ‚Üí users(id)

TABLE: group_members
------------------------------------------------
group_id             BIGINT          FK ‚Üí groups(id)
user_id              BIGINT          FK ‚Üí users(id)
PRIMARY KEY (group_id, user_id)

TABLE: user_groups
------------------------------------------------
group_id             BIGINT          FK ‚Üí groups(id)
user_id              BIGINT          FK ‚Üí users(id)
PRIMARY KEY (group_id, user_id)

TABLE: follows
------------------------------------------------
id                   BIGINT          PRIMARY KEY
follower_id          BIGINT          FK ‚Üí users(id)
following_id         BIGINT          FK ‚Üí users(id)

TABLE: reported_post
------------------------------------------------
id                   BIGINT          PRIMARY KEY
reason               VARCHAR(255)
reported_at          DATETIME(6)
reported_post_id     BIGINT          FK ‚Üí post(id)
reporter_id          BIGINT          FK ‚Üí users(id)

TABLE: post_likes (optional if normalized via likes table)
------------------------------------------------
post_id              BIGINT          FK ‚Üí post(id)
user_id              BIGINT          FK ‚Üí users(id)
PRIMARY KEY (post_id, user_id)